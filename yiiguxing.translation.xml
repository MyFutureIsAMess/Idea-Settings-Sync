<application>
  <component name="AppStorage">
    <histories>
      <item value="Pairing of a name and the {@link org.eclipse.jgit.lib.ObjectId} it currently * has. * &lt;p&gt; * A ref in Git is (more or less) a variable that holds a single object * identifier. The object identifier can be any valid Git object (blob, tree, * commit, annotated tag, ...). * &lt;p&gt; * The ref name has the attributes of the ref that was asked for as well as the * ref it was resolved to for symbolic refs plus the object id it points to and * (for tags) the peeled target object id, i.e. the tag resolved recursively * until a non-tag object is referenced." />
      <item value="The ref name has the attributes of the ref that was asked for as well as the * ref it was resolved to for symbolic refs plus the object id it points to and * (for tags) the peeled target object id, i.e. the tag resolved recursively * until a non-tag object is referenced." />
      <item value="A ref in Git is (more or less) a variable that holds a single object * identifier. The object identifier can be any valid Git object (blob, tree, * commit, annotated tag, ...)." />
      <item value="This class is intended to be used internally (e.g. by JGit tests) or by * external components (EGit, third-party tools) when they need exactly the * functionality of a GitPorcelain command. There are use-cases where this class * is not optimal and where you should use the more low-level JGit classes. The * methods in this class may for example offer too much functionality or they * offer the functionality with the wrong arguments." />
      <item value="19:22 Iedis: A network is required to use Iedis or you may need to upgrade the plugin to the latest version." />
      <item value="Gets the validation mode for the specified {@link Resource}. If no explicit * validation mode has been configured then the validation mode is * {@link #detectValidationMode detected}." />
      <item value="Gets the validation mode for the specified {@link Resource}. If no explicit" />
      <item value="Give BeanPostProcessors a chance to return a proxy instead of the target bean instance." />
      <item value="Fail if we're already creating this bean instance:" />
      <item value="We're assumably within a circular reference." />
      <item value="Eagerly check singleton cache for manually registered singletons" />
      <item value="Return an instance, which may be shared or independent, of the specified bean." />
      <item value="Return whether this bean is a primary autowire candidate. * If this value is true for exactly one bean among multiple * matching candidates, it will serve as a tie-breaker." />
      <item value="Process the given bean element, parsing the bean definition * and registering it with the registry." />
      <item value="Parse the elements at the root level in the document: * &quot;import&quot;, &quot;alias&quot;, &quot;bean&quot;." />
      <item value="Register each bean definition within the given root {@code &lt;beans/&gt;} element." />
      <item value="Actually load bean definitions from the specified XML file." />
      <item value="Return a description for this resource, * to be used for error output when working with the resource." />
      <item value="Indicates that the validation mode should be detected automatically." />
      <item value="Indicates that the validation should be disabled." />
      <item value="Load bean definitions from the specified XML file." />
      <item value="Create a new EncodedResource for the given Resource, * using the specified encoding." />
      <item value="Create a new EncodedResource for the given Resource," />
      <item value="Create a new AbstractBeanDefinitionReader for the given bean factory." />
      <item value="etermine whether the given field is a &quot;public static final&quot; constant." />
      <item value="Create a new Constants converter class wrapping the given class." />
      <item value="Constants instance for this class" />
      <item value="Map from serialized id to factory instance" />
      <item value="Determine the raw name, resolving aliases to canonical names." />
      <item value="canonical Name" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="30" />
        <entry key="ENGLISH" value="30" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>